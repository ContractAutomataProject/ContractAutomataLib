package FMA;
import java.util.Vector;

import FSA.FSA;
import FSA.Continuation;
import FSA.Simulator;
import FSA.Transition;


/**
 * The class take in input an FMA and decide if a string is recognized by the automaton
 * @author Davide Basile
 *
 */
public class FMASimulator extends Simulator {
	
	public FMASimulator(FSA automa)
	{
		super((FMA) automa);
	}
	
	public void changeAutoma(FSA automa)
	{
		super.changeAutoma((FMA) automa);
	}
	
	/**
	 * Update the state of the simulator by performing the transition and eventually update the register
	 * @param tr transition to perform
	 * @param value  value to be inserted in the register or -1
	 * @return true if the Transition is not null, otherwise else
	 */

	
	/**
	 * Perform a step in the automaton
	 * if the symbol is contained in the register select a transition where the label is equal to the index of the register that contains the symbol in input
	 * otherwise select a transition where the label is equal to the function rho(state) and update the register at location rho(state) with value
	 * if several transitions are allowed store the others in the continuation
	 * @param value the value to be stored in the register or -1
	 * @param continuation the continuation
	 * @param index index of the register that contains the symbol in input or -1
	 * @return true if the transition is performed, false otherwise
	 */

	
	protected boolean isValid(Transition tr,int symbol)
	{
		int[] rho=((FMA) automa).getRho();
		int index = contains(symbol,((FMA) automa).getRegister());  //check if the symbol in input is contained in the register
		if (index!=-1)
			return tr.getLabel()==index; // the label is equal to the index of the register that contains the symbol in input
		else if (rho[pointer_state]!=-1)
			return tr.getLabel()==rho[pointer_state];
		else
			return false;
		
	}
	
	protected void updateState(Transition tr,int symbol)
	{
		int index = contains(symbol,((FMA) automa).getRegister()); 
		if (index==-1)
			updateRegister(symbol); //update register if the symbol is not contained in the register
		super.updateState(tr, symbol);
	}
	
	
	/**
	 * Change the value of a register pointed by the function rho with s
	 * @param s the value to be stored
	 */
	private void updateRegister(int s)
	{
		int[] register= ((FMA) automa).getRegister();
		int[] rho=((FMA) automa).getRho();
		register[rho[pointer_state]]=s;
		((FMA) automa).updateRegister(register);
	}
	

	protected void updateStateContinuation(Continuation c)
	{
		super.updateStateContinuation(c);
		((FMA) automa).updateRegister(((FMAContinuation)c).getRegister());
	}

	protected Continuation createContinuation()
	{
		return new FMAContinuation(pointer_state,pointer_string, ((FMA) automa).getRegister(), null);
	}
	
}
