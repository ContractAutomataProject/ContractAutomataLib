package FSA;



import java.util.Vector;

/**
 * This class represents a freezed state of the simulator
 * @author Davide Basile
 *
 */
public class Continuation {
	protected int pointer_state; //the actual state
	protected int pointer_string; //pointer to the symbol in input
	private Vector<Transition> tr; //the possible transitions to be executed
	
	public Continuation(int pe, int pg, Vector<Transition> tr)
	{
		this.pointer_state = pe;
		this.pointer_string = pg;
		this.tr=tr;
	}
	
	public boolean check(int pe, int pg)
	{
		return (pe==pointer_state)&&(pg==pointer_string);
	}
	
	public Vector<Transition> getTransition()
	{
		return tr;
	}
	
	public void setTransition(Vector<Transition> v)
	{
		this.tr=v;
	}
	
	public int getPointerState()
	{
		return pointer_state;
	}
	public int getPointerString()
	{
		return pointer_string;
	}
	
	public Continuation cloneWithoutTransition()
	{
		return new Continuation(this.pointer_state,this.pointer_string, new Vector<Transition>(tr.size()));
	}
	
	public boolean equalWithoutTransition(Continuation c)
	{
		return this.getPointerState()==c.getPointerState()&&this.getPointerString()==c.getPointerString();
	}
	
	public boolean containTransition(Continuation c,Transition t)
	{
		boolean b = c.getPointerState()==this.pointer_state&&c.getPointerString()==this.getPointerString();
		if (b)
		{
			for(int i=0;i<tr.size();i++)
				if (tr.elementAt(i).equals(t))
					return true;
		}
		return false;
	}
	
}
