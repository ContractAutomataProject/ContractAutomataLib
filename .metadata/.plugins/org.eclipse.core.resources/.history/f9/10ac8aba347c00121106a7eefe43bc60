package FSA;

import java.util.Vector;



@SuppressWarnings("rawtypes")
/**
 * 
 * @author Davide Basile
 *
 */
public class Simulator {
	protected int pointer_state;
	protected int pointer_string;
	protected FSA automa;
	
	/**
	 * The constructor
	 * @param automa The automaton to simulate
	 */
	public Simulator(FSA automa)
	{
		this.automa=automa;
	}
	
	/**
	 * Change the automaton to simulate
	 * @param automa
	 */
	public void changeAutoma(FSA automa)
	{
		this.automa=automa;
	}
	
	/**
	 * At every iteration
	 * 		first check if the string is consumed, then if we are in a final state and the side conditions are verified then the string is accepted, 
	 * 				else backtracking if possible, otherwise return false
	 * 		if the string is not consumed yet:
	 * 					if there is a continuation then performs the step stored
	 * 					else if there are possible steps then performs one and store the others in the continuation
	 * 					if no possible step are allowed, then performs backtracking or if the continuation is empty return false
	 * @param s the string to be recognized
	 * @return true if s is recognized by the automata, false otherwise
	 */
	public boolean run(int[] s)
	{
		Vector<Continuation> continuation= new Vector<Continuation>();
		Vector<Continuation> visited = new Vector<Continuation>();
		Transition temp = null;
		this.pointer_state=automa.getInitial();
		this.pointer_string=0;
		while (true)
		{
			if (pointer_string == s.length) //if the string is consumed
			{
				if ((contains(pointer_state, automa.getFinalStates())!=-1)&&(sideConditions())) //if we reach a final state OK
					return true;
				else
				{
					temp = backtracking(continuation,visited);	// else check if there are other possible pending paths to follow
					if (temp==null) return false; //if it is not the case then the string is not accepted
				}
			}
			else
			{		
				if (!checkContinuation(temp,s[pointer_string]))  //if there is a continuation then move on
					{
						if (!step(s[pointer_string],continuation))
						{
							temp = backtracking(continuation,visited); //if a step is not possible then backtracking
							if (temp==null) return false; //if backtracking is not possible the string is not accepted
						}
					}
					else
						temp=null;
			}
		}
	}
	
	/**
	 * If a transition is stored in the continuation (tr!= null), then perform the step by updating the state of the simulator
	 * @param tr transition to perform
	 * @param symbol the symbol in input
	 * @return true if tr is not null, otherwise false
	 */
	protected boolean checkContinuation(Transition tr, int symbol)
	{
		if (tr!=null)
		{
			updateState(tr,symbol);
			return true;
		}
		else return false;
	}
	
	/**
	 * select the top continuation and update the state, if all the transition for that continuation are consumed then remove it
	 * @param continuation the vector of continuation
	 * @return the transition to be performed
	 */
	protected Transition backtracking(Vector<Continuation> continuation,Vector<Continuation> visited)
	{
		boolean contains;
		Transition tr = null;
		Continuation c = null;
		if (continuation.isEmpty())
			return null;
		do{
			/**
			 * Select a Transition to be performed in the continuation that it was not previously visited.
			 */
			contains=false;
			c = continuation.elementAt(continuation.size()-1);
			Vector<Transition> v =  c.getTransition();
			tr= v.remove(v.size()-1);
			if (v.isEmpty())
				continuation.remove(continuation.size()-1);
			for (int i=0;i<visited.size();i++)
			{
				Continuation co = visited.elementAt(i);
				if (co.containTransition(c, tr))
				{
					contains=true;
					break;
				}
			}
		} while(contains||continuation.isEmpty());
		if (continuation.isEmpty())
			return null;
		/**
		 * If there exists a continuation without the transition to be performed, then add this transition 
		 * to the selected continuation.
		 * If such continuation does not exists, create a new one and add the transition to be performed.
		 */
		contains = false;
		for (int i=0;i<visited.size();i++)
		{
			Continuation co = visited.elementAt(i);
			if (co.equalWithoutTransition(c))
			{
				co.getTransition().add(tr);
				contains=true;
				break;
			}
		}
		if(!contains)
		{
			Continuation co = c.cloneWithoutTransition();
			co.getTransition().add(tr);
			visited.add(co);
		}
		updateStateContinuation(c);
		return tr;
	}
	
	private void checkVisited(Vector<Transition> tr,Vector<Continuation> visited)
	{
		
	}
	
	protected void updateStateContinuation(Continuation c)
	{
		pointer_state=c.getPointerState();
		pointer_string=c.getPointerString();
	}
	
	protected boolean sideConditions()
	{
		return true;
	}
	
	protected void updateState(Transition tr,int symbol)
	{
		pointer_string++;
		pointer_state=tr.getFinal();
	}
	
	protected boolean isValid(Transition tr,int symbol)
	{
		return tr.getLabel()==symbol;
	}
	
	protected boolean step(int symbol, Vector<Continuation> continuation)
	{
		Transition[] t= Transition.getTransitionFrom(pointer_state, automa.getTransition()); //all the transition from this state
		
		// select the transitions allowed
		Transition[] allowed = new Transition[t.length];
		int j=0;
		for (int i=0; i<t.length; i++)
		{
			Transition tr= t[i];
			if (this.isValid(tr,symbol))
			{
				allowed[j]=tr;
				j++;
			}	
			
		}		
		if (allowed[0]!=null) 
		{ 
			//if exists transitions then move 
			//move with the first transition and store all the others in the continuation
			if (allowed.length>1)
			{
				Vector<Transition> tr = new Vector<Transition>(allowed.length-1);
				for (int i=1;i<allowed.length;i++)
				{
					if (allowed[i]!=null){
						tr.add(t[i]);
					}
					else
						break;
				}
				
				if (allowed.length>0)
				{
					Continuation c = createContinuation().cloneWithoutTransition();  
					c.setTransition(tr);
					continuation.add(c);
				}
			}
			updateState(allowed[0],symbol);
			return true;
		}
		else 
			return false; //no step available
	}
	
	
	/**
	 * Store all the transition of index > 0 (the first will be selected for the move)
	 * @param v vector of continuation
	 * @param t array of transitions to be stored in the continuation
	 */
	protected Continuation createContinuation()
	{
		return new Continuation(pointer_state,pointer_string, null);
	}
	
	/**
	 * check if n is contained in a
	 * @param n integer to search
	 * @param a array of integer
	 * @return the index of the element of the array that contains n, -1 if the element is not contained
	 */
	protected static int contains(int n, int[] a) 
	{
		for (int i=0;i<a.length;i++)
		{
			if (a[i]==n)
				return i;
		}
		return -1;
	}
	
	protected static int contains(int n, Vector v){
		for (int i=0; i<v.size();i++)
		{
			if ( (int)v.elementAt(i)==n)
				return i;
		}
		return -1;
	}
	
}
