package CA;

import java.util.Arrays;

import FSA.Transition;

/**
 * Utilities for CA: product, aproduct
 * 
 * @author Davide Basile
 *
 */
public class CAUtil 
{

	static boolean debug = false;
	/**
	 * compute the product automaton of the CA given in aut
	 * @param aut the operands of the product
	 * @return the composition of aut
	 */
	public static CA product(CA[] aut)
	{
		if (aut.length==1)
			return aut[0];
		/**
		 * compute rank, states, initial states, final states
		 */
		int prodrank = 0;
		for (int i=0;i<aut.length;i++)
		{
			prodrank = prodrank+(aut[i].getRank()); 
		}
		int[] statesprod = new int[prodrank];
		int[][] finalstatesprod = new int[prodrank][];
		int[] initialprod = new int[prodrank];
		int totnumstates=0;
		int pointerprodrank=0;
		for (int i=0;i<aut.length;i++)
		{
			for (int j=0;j<aut[i].getRank();j++)
			{
				statesprod[pointerprodrank]= aut[i].getStatesCA()[j];		
				totnumstates += statesprod[pointerprodrank];
				finalstatesprod[pointerprodrank] = aut[i].getFinalStatesCA()[j];
				initialprod[pointerprodrank] = aut[i].getInitialCA()[j];
				pointerprodrank++;
			}
		}
		
		/**
		 * compute transitions, non associative
		 * 
		 * scan all pair of transitions, if there is a match
		 * then generate the match in all possible contexts		 
		 * it also generates the independent moves, then clean from invalid transitions 
		 */
		Transition[][] prodtr = new CATransition[aut.length][];
		int trlength = 0;
		for(int i=0;i<aut.length;i++)
		{
			prodtr[i]= aut[i].getTransition();
			trlength += prodtr[i].length;
		}
		Transition[] transprod = new CATransition[trlength*(trlength-1)*totnumstates]; //upper bound to the total transitions
		int pointertemp = 0;
		int pointertransprod = 0;
		boolean match=false;
		for (int i=0;i<prodtr.length;i++)
		{
			Transition[] t = prodtr[i];
			for (int j=0;j<t.length;j++)
			{
				CATransition[][] temp = new CATransition[trlength*(trlength-1)][];
				Transition[] trtemp = new CATransition[trlength*(trlength-1)];//stores the other transition involved in the match in temp
				pointertemp=0; //reinitialized each new transition
				for (int ii=0;ii<prodtr.length;ii++)
				{
					if (ii!=i)
					{
						Transition[] tt = prodtr[ii];
						for (int jj=0;jj<tt.length;jj++)
						{
							if (CATransition.match( ((CATransition)t[j]).getLabelP() ,((CATransition) tt[jj]).getLabelP() )) //match found
							{
								match=true;
								CATransition[] gen;
								if (i<ii)
									 gen = generateTransitions(t[j],tt[jj],i,ii,aut);
								else
									gen = generateTransitions(tt[jj],t[j],ii,i,aut);
								temp[pointertemp]=gen; //temp is temporary used for comparing matches and offers/requests
								trtemp[pointertemp]=tt[jj];
								pointertemp++;
								for (int ind=0;ind<gen.length;ind++)
								{
									boolean copy=true;
									for (int ind2=0;ind2<pointertransprod;ind2++)
									{
										if (transprod[ind2].equals(gen[ind]))
										{
											copy=false;
											break;
										}
									}
									if(copy)
									{
										transprod[pointertransprod]=gen[ind]; 
										if (debug)
											System.out.println(gen[ind].toString());
										//copy all the matches in the transition of the product automaton, if not already in !
										pointertransprod++;
									}
								}
							}
						}
					}
				}
				CATransition[] gen = generateTransitions(t[j],null,i,-1,aut);
				//insert only valid transitions of gen, that is a principle moves independently in a state only if it is not involved
				// in matches
					
				if ((match)&&(gen!=null))		
				{
					/**
					 * extract the first transition of gen to check the principal who move 
					 * and its state 
					 */
					CATransition tra = gen[0];
					int[] lab = tra.getLabelP(); 
					int pr1=-1;
					for (int ind2=0;ind2<lab.length;ind2++)
					{
						if (lab[ind2]!=0)
						{
							pr1=ind2; //principal
						}
					}
					int label = tra.getLabelP()[pr1];  //the action of the principal who moves
					for (int ind3=0;ind3<gen.length;ind3++)
					{
						for (int ind=0;ind<pointertemp;ind++)
							for(int ind2=0;ind2<temp[ind].length;ind2++)
							{	
								if(gen[ind3]!=null)
								{
									if (Arrays.equals(gen[ind3].getSource(),temp[ind][ind2].getSource()) &&  //the state is the same
											label==temp[ind][ind2].getLabelP()[pr1]) //pr1 makes the same move
									{
										gen[ind3]=null;
									}
								}
							}
					}
					
					/**
					 * 
					 *
					for (int ind=0;ind<pointertemp;ind++)
					{
						/**
						 * extract the first transition of temp[ind] to check the two principals who move in the match
						 * and their state (they are equal in all inner transitions)
						 *
						CATransition tra = temp[ind][0];
						int[] lab = tra.getLabelP(); 
						int pr1=-1;int pr2=-1;
						for (int ind2=0;ind2<lab.length;ind2++)
						{
							if (lab[ind2]!=0)
							{
								if (pr1==-1)
									pr1=ind2; //principal 1
								else
									pr2=ind2; //principal 2
							}
						}
						int[] source = tra.getInitialP();
						int pr1s = source [pr1];  //principal 1 state
						int pr2s = source [pr2];  //principal 2 state
						/**
						 * in all the non-match transitions generated in gen, if the two principals are in the initial state, then
						 * in that particular state the non-match transition of one of the two was not allowed and it is removed
						 *
						for (int ind2=0;ind2<gen.length;ind2++)
						{
							if(gen[ind2]!=null)
							{
								if ((gen[ind2].getInitialP()[pr1]==pr1s)&&(gen[ind2].getInitialP()[pr2]==pr2s))
									gen[ind2]=null;
							}
						}
					}
					*/					
				}
				/**
				 * finally insert only valid independent moves in transprod
				 */
				for (int ind=0;ind<gen.length;ind++)
				{
					if (gen[ind]!=null)
					{
						transprod[pointertransprod]=gen[ind];
						if (debug)
							System.out.println(gen[ind].toString());
						pointertransprod++;
					}
				}
			}
		}
		/**
		 * remove all unused space in transProd (null at the end of the array)
		 */
		CATransition[] finalTr = new CATransition[pointertransprod];
		for (int ind=0;ind<pointertransprod;ind++)
			finalTr[ind]= (CATransition)transprod[ind];
		
		CA prod =  new CA(prodrank,initialprod,statesprod,finalstatesprod,finalTr);
		
		if (debug)
			System.out.println("Remove unreachable ...");
		prod = removeUnreachable(prod);
		
		return prod;
	}
	
	/**
	 * remove the unreachable transitions from aut
	 * @param at	the CA
	 * @return	a new CA clone of aut with only reachable transitions
	 */
	protected static CA removeUnreachable(CA at)
	{
		CA aut = at.clone();
		CATransition[] finalTr=aut.getTransition();
		
		/**
		 * remove unreachable transitions
		 */
		int removed=0;
		int pointerreachable=1;
		int pointerunreachable=0;
		int[][] reachable = new int[at.prodStates()][]; 
		int[][] unreachable = new int[at.prodStates()][];
		reachable[0]=aut.getInitialCA();
		for (int ind=0;ind<finalTr.length;ind++)
		{
			//for each transition t checks if the source state of t is reachable from the initial state of the CA
			CATransition t=(CATransition)finalTr[ind];
			int[] s = t.getSource();
			/**
			int[] debugg = {0,0,1};
			if (Arrays.equals(s,debugg))
				System.out.println("debug");*/
			int[] pointervisited = new int[1];
			pointervisited[0]=0;
			if (debug)
				System.out.println("Checking Reachability state "+Arrays.toString(s));
			if(!amIReachable(s,aut,aut.getInitialCA(),new int[aut.prodStates()][],pointervisited,reachable,unreachable,pointerreachable,pointerunreachable))
			{
				finalTr[ind]=null;
				removed++;
				boolean found=false;
				for (int i=0;i<pointerunreachable;i++)
				{
					if (Arrays.equals(unreachable[i],s))
					{
						found=true;
					}
				}
				if (!found)
				{
					unreachable[pointerunreachable]=s;
					pointerunreachable++;
				}
			}
			else
			{
				boolean found=false;
				for (int i=0;i<pointerreachable;i++)
				{
					if (Arrays.equals(reachable[i],s))
					{
						found=true;
					}
				}
				if (!found)
				{
					reachable[pointerreachable]=s;
					pointerreachable++;
				}
			}
		}
		
		/**
		 * remove holes (null) in finalTr2
		 */
		int pointer=0;
		CATransition[] finalTr2 = new CATransition[finalTr.length-removed];
		for (int ind=0;ind<finalTr.length;ind++)
		{
			if (finalTr[ind]!=null)
			{
				finalTr2[pointer]=finalTr[ind];
				pointer++;
			}
		}
		aut.setTransition(finalTr2);
		return aut;
	}
	
	/**
	 * remove transitions who do not reach a final state
	 * @param at	the CA
	 * @return	CA without hanged transitions
	 */
	protected static CA removeHangedTransitions(CA at)
	{
		CA aut = at.clone();
		CATransition[] finalTr=aut.getTransition();
		int removed=0;
		int pointerreachable=0;
		int pointerunreachable=0;
		int[][] reachable = new int[at.prodStates()][]; 
		int[][] unreachable = new int[at.prodStates()][];
		int[][] fs = aut.allFinalStates();
		/**for (int i=0;i<fs.length;i++)
		{
			reachable[i] = fs[i];
			pointerreachable++;
		}*/
		
		for (int ind=0;ind<finalTr.length;ind++)
		{
			// for each transition checks if the arrival state s is reachable from one of the final states of the ca
			CATransition t=(CATransition)finalTr[ind];
			int[] arr = t.getArrival();

			boolean remove=true;
			
			for (int i=0;i<fs.length;i++)
			{
				int[] pointervisited = new int[1];
				pointervisited[0]=0;
				if(amIReachable(fs[i],aut,arr,new int[aut.prodStates()][],pointervisited,reachable,unreachable,pointerreachable,pointerunreachable)) //if final state fs[i] is reachable from arrival state arr
					remove = false;
			}
			//if t does not reach any final state then remove
			if(remove)
			{
				finalTr[ind]=null;
				removed++;
			}
			
			/**
			 * 		
			CATransition t=(CATransition)finalTr[ind];
			int[] arr = t.getArrival();	
			int[] pointervisited = new int[1];
			pointervisited[0]=0;
			if(amIReachable(fs[i],aut,arr,new int[aut.prodStates()][],pointervisited,reachable,unreachable,pointerreachable,pointerunreachable)) 
				//if final state fs[i] is reachable from arrival state arr
			{	
				finalTr[ind]=null;
				removed++;
				unreachable[pointerunreachable]=arr;
				pointerunreachable++;  //note that pointerunreachable == removed
			}
			else
			{
				reachable[pointerreachable]=arr;
				pointerreachable++;
			}	
			*/					
		}
			
			
		/**
		 * remove holes (null) in finalTr2
		 */
		int pointer=0;
		CATransition[] finalTr2 = new CATransition[finalTr.length-removed];
		for (int ind=0;ind<finalTr.length;ind++)
		{
			if (finalTr[ind]!=null)
			{
				finalTr2[pointer]=finalTr[ind];
				pointer++;
			}
		}
		aut.setTransition(finalTr2);
		return aut;
	}
	
	/**
	 * true if state[] is reachable from  from[]  in aut
	 * @param state
	 * @param aut
	 * @param visited
	 * @param pointervisited
	 * @return  true if state[] is reachable from  from[]  in aut
	 */
	private static boolean amIReachable( int[] state, CA aut, int[] from, int[][] visited, int[] pointervisited,int[][] reachable,int[][] unreachable, int pointerreachable,int pointerunreachable )
	{
		if (Arrays.equals(state,from))
			return true;
		for (int i=0;i<pointerunreachable;i++)
		{
			if (Arrays.equals(unreachable[i],state))
				return false;
		}
		for (int i=0;i<pointerreachable;i++)
		{
			if (Arrays.equals(reachable[i],state))
				return true;
		}
		
		for (int j=0;j<pointervisited[0];j++)
		{
			if (Arrays.equals(visited[j],state))
			{
				return false;
			}
		}
		visited[pointervisited[0]]=state;
		pointervisited[0]++;
		
		//if (debug)
		//	System.out.println("Visited "+pointervisited[0]+" "+Arrays.toString(visited[pointervisited[0]-1]));
		CATransition[] t = aut.getTransition();
		for (int i=0;i<t.length;i++)
		{
			if (t[i]!=null)
			{
				if (Arrays.equals(state,t[i].getArrival()))
				{
					if (amIReachable(t[i].getSource(),aut,from,visited,pointervisited,reachable,unreachable,pointerreachable,pointerunreachable))
						return true;
				}
			}
		}
		return false;
	}
	
	
	/**
	 * 
	 * @param t  first transition made by one CA
	 * @param tt second transition if it is a match, otherwise null
	 * @param i  the index of the CA whose transition is t
	 * @param ii the index of the CA whose transition is tt or -1
	 * @param aut all the CA to be in the transition
	 * @return an array of transitions where i (and ii) moves and the other stays idle in each possible state 
	 */
	private static CATransition[] generateTransitions(Transition t, Transition tt, int i, int ii, CA[] aut)
	{
		/**
		 * preprocessing to the recursive method recgen:
		 * it computes  the values firstprinci,firstprincii,numtransitions,states
		 */
		int prodrank = 0; //the sum of rank of each CA in aut, except i and ii
		int firstprinci=-1; //index of first principal in aut[i] in the list of all principals in aut
		int firstprincii=-1; //index of first principal in aut[ii] in the list of all principals in aut
		int[] states=null; //the number of states of each principal, except i and ii
		int numtransitions=1; //contains the product of the number of states of each principals, except for those of i and ii
		if (tt!= null) //if is a match
		{			
			/**
			 * first compute prodrank, firstprinci,firstprincii
			 */
			for (int ind=0;ind<aut.length;ind++)
			{
				if ((ind!=i)&&(ind!=ii))
					prodrank += (aut[ind].getRank()); 
				else 
				{
					if (ind==i)
						firstprinci=prodrank; //these values are handled inside generateATransition static method
					else 
						firstprincii=prodrank; //note that firstprinci and firstprincii could be equal
				}
					
			}
			if (prodrank!=0)
			{
				states = new int[prodrank]; 
				int indstates=0;
				//filling the array states with number of states of all principals of CA in aut except of i and ii
				for (int ind=0;ind<aut.length;ind++) 
				{
					if ((ind!=i)&&(ind!=ii))
					{
						int[] statesprinc=aut[ind].getStatesCA();
						for(int ind2=0;ind2<statesprinc.length;ind2++)
							{						
								states[indstates]=statesprinc[ind2];
								numtransitions*=states[indstates];
								indstates++;
							}
					}
				}		
			}
		}
		else	//is not a match
		{
			for (int ind=0;ind<aut.length;ind++)
			{
				if (ind!=i)
					prodrank = prodrank+(aut[ind].getRank()); 
				else if (ind==i)
					firstprinci=prodrank;					
			}
			if(prodrank!=0)
			{
				states = new int[prodrank]; //the number of states of each principal except i 
				int indstates=0;
				//filling the array states
				for (int ind=0;ind<aut.length;ind++)
				{
					if (ind!=i)
					{
						int[] statesprinc=aut[ind].getStatesCA();
						for(int ind2=0;ind2<statesprinc.length;ind2++)
							{						
								states[indstates]=statesprinc[ind2];
								numtransitions*=states[indstates];
								indstates++;
							}
					}
				}	
			}
		}
		CATransition[] tr = new CATransition[numtransitions];
		if(prodrank!=0)
		{
			int[] insert= new int[states.length];
			//initialize insert to zero in all component
			for (int ind=0;ind<insert.length;ind++)
				insert[ind]=0;
			recGen(t,tt,firstprinci, firstprincii,tr,states,0, states.length-1, insert);
		}
		else
			tr[0]=generateATransition(t,tt,0,0,new int[0]);
		return tr;
	}
	
	
	/**
	 * 
	 * recursive methods that generates all combinations of transitions with all possible states of principals that are idle 
	 * it must start from the end of array states
	 * 
	 * @param t		first transition who moves
	 * @param tt	second transition who moves or null if it is not a match
	 * @param fi	offset of first CA who moves in list of principals
	 * @param fii	offset of second CA who moves in list of principals or empty
	 * @param cat	side effect: modifies cat by adding the generated transitions
	 * @param states	the number of states of each idle principals
	 * @param indcat	pointer in the array cat, the first call must be 0
	 * @param indstates	pointer in the array states, the first call must be states.length-1
	 * @param insert    it is used to generate all the combinations of states of idle principals, the first must be all zero
	 */
	private static void recGen(Transition t, Transition tt, int fi, int fii, CATransition[] cat,  int[] states, int indcat, int indstates, int[] insert)
	{
		if (indstates==-1)
			return;
		if (insert[indstates]==states[indstates])
		{
			insert[indstates]=0;
			indstates--;
			recGen(t,tt,fi,fii,cat,states,indcat,indstates,insert);
		}
		else
		{
			if (indstates==states.length-1)
			{
				cat[indcat]=generateATransition(t,tt,fi,fii,insert);
				indcat++;
				insert[indstates]++;
				recGen(t,tt,fi,fii,cat,states,indcat,indstates,insert);
			}
			else
			{
				insert[indstates]++; 
				if (insert[indstates]!=states[indstates])
					indstates=states.length-1;
				recGen(t,tt,fi,fii,cat,states,indcat,indstates,insert);				
			}
		}
	}
	
	
	/**
	 * 
	 * Generates all possible combinations of the states in fin, stored in modif
	 * 
	 * @param fin	the array of final states of each principal
	 * @param modif		the array of final states of the composition, modified by side effect
	 * @param states	states[i] = fin[i].length
	 * @param indmod	index in modif, the first call must be 0
	 * @param indstates		the index in states, the first call must be states.length-1
	 * @param insert	it is used to generate all the combinations of final states, the first call must be all zero
	 */
	protected static void recGen(int[][] fin, int[][] modif,  int[] states, int indmod[], int indstates[], int[] insert)
	{
		if (indstates[0]==-1)
			return;
		if (insert[indstates[0]]==states[indstates[0]])
		{
			insert[indstates[0]]=0;
			indstates[0]--;
			recGen(fin,modif,states,indmod,indstates,insert);
		}
		else
		{
			if (indstates[0]==states.length-1)
			{
				modif[indmod[0]]=new int[insert.length];
				for(int i=0;i<insert.length;i++)
				{
					modif[indmod[0]][i]=fin[i][insert[i]];
				}
				indmod[0]++;
				insert[indstates[0]]++;
				recGen(fin,modif,states,indmod,indstates,insert);
			}
			else
			{
				insert[indstates[0]]++; 
				if (insert[indstates[0]]!=states[indstates[0]])
					indstates[0]=states.length-1;
				recGen(fin,modif,states,indmod,indstates,insert);				
			}
		}
	}
	
	/**
	 * 
	 * @param t				first transition to move
	 * @param tt			second transition to move only in case of match
	 * @param firstprinci  the index to start to copy the principals in t
	 * @param firstprincii the index to start to copy the principals in tt
	 * @param insert		the states of all other principals who stays idle
	 * @return				a new transition where only principals in t (and tt) moves while the other stays idle in their state given in insert[]
	 */
	private static CATransition generateATransition(Transition t, Transition tt, int firstprinci, int firstprincii,int[] insert)
	{
		if (tt!=null)
		{
			int[] s=((CATransition) t).getSource();
			int[] l=((CATransition) t).getLabelP();
			int[] d=((CATransition) t).getArrival();
			int[] ss = ((CATransition) tt).getSource();
			int[] ll=((CATransition) tt).getLabelP();
			int[] dd =((CATransition) tt).getArrival();
			int[] initial = new int[insert.length+s.length+ss.length];
			int[] dest = new int[insert.length+s.length+ss.length];
			int[] label = new int[insert.length+s.length+ss.length];
			int counter=0;
			for (int i=0;i<insert.length;i++)
			{
				if (i==firstprinci)
				{
					for (int j=0;j<s.length;j++)
					{
						initial[i+j]=s[j];
						label[i+j]=l[j];
						dest[i+j]=d[j];
					}
					counter+=s.length; //record the shift due to the first CA 
					i--;
					firstprinci=-1;
				}
				else 
				{
					if (i==firstprincii)
					{
						for (int j=0;j<ss.length;j++)
						{
							initial[i+counter+j]=ss[j];
							label[i+counter+j]=ll[j];
							dest[i+counter+j]=dd[j];
						}
						counter+=ss.length;//record the shift due to the second CA 
						i--;
						firstprincii=-1;
					}	
					else 
					{
						initial[i+counter]=insert[i];
						dest[i+counter]=insert[i];
						label[i+counter]=0;
					}
				}
			}
			if (firstprinci==insert.length)//case limit, the first CA was the last of aut
			{
				for (int j=0;j<s.length;j++)
				{
					initial[insert.length+j]=s[j];
					label[insert.length+j]=l[j];
					dest[insert.length+j]=d[j];
				}
				counter+=s.length; //record the shift due to the first CA 
			}
			if (firstprincii==insert.length) //case limit, the second CA was the last of aut
			{
				for (int j=0;j<ss.length;j++)
				{
					initial[insert.length+counter+j]=ss[j];
					label[insert.length+counter+j]=ll[j];
					dest[insert.length+counter+j]=dd[j];
				}
			}
			return new CATransition(initial,label,dest);	
		}
		else
		{
			int[] s=((CATransition) t).getSource();
			int[] l=((CATransition) t).getLabelP();
			int[] d=((CATransition) t).getArrival();
			int[] initial = new int[insert.length+s.length];
			int[] dest = new int[insert.length+s.length];
			int[] label = new int[insert.length+s.length];
			int counter=0;
			for (int i=0;i<insert.length;i++)
			{
				if (i==firstprinci)
				{
					for (int j=0;j<s.length;j++)
					{
						initial[i+j]=s[j];
						label[i+j]=l[j];
						dest[i+j]=d[j];
					}
					counter+=s.length; //record the shift due to the first CA 
					i--;
					firstprinci=-1;
				}
				else
				{
					initial[i+counter]=insert[i];
					dest[i+counter]=insert[i];
					label[i+counter]=0;
				}
			}
			if (firstprinci==insert.length)//case limit, the first CA was the last of aut
			{
				for (int j=0;j<s.length;j++)
				{
					initial[insert.length+j]=s[j];
					label[insert.length+j]=l[j];
					dest[insert.length+j]=d[j];
				}
				counter+=s.length; //record the shift due to the first CA 
			}
			return new CATransition(initial,label,dest);	
		}
	}
	
	/**
	 * compute the associative product of the CA in the array a
	 * @param a  array of CA
	 * @return  the associative product
	 */
	public static CA aproduct(CA[] a)
	{
		int tot=0;
		for (int i=0;i<a.length;i++)
			tot+=a[i].getRank();
		if (tot==a.length)
			return product(a);
		else
		{
			CA[] a2=new CA[tot];
			int pointer=0;
			for(int i=0;i<a.length;i++)
			{
				if(a[i].getRank()>1)
				{
					for (int j=0;j<a[i].getRank();j++)
					{
						a2[pointer]=a[i].proj(j);
						pointer++;
					}
				}
				else
				{
					a2[pointer]=a[i];
					pointer++;
				}
			}
			return product(a2);
		}
			
	}

}
