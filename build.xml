<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="CAT_Lib">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../eclipse/java-2018-09/eclipse/"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="9"/>
    <property name="source" value="9"/>
    <path id="Maven Dependencies.libraryclasspath">
        <pathelement location="../../.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar"/>
        <pathelement location="../../.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
        <pathelement location="../../.m2/repository/org/json/json/20210307/json-20210307.jar"/>
        <pathelement location="../../.m2/repository/org/assertj/assertj-core/3.10.0/assertj-core-3.10.0.jar"/>
        <pathelement location="../../.m2/repository/org/ow2/sat4j/org.ow2.sat4j.core/2.3.4/org.ow2.sat4j.core-2.3.4.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/plugins/maven-gpg-plugin/3.0.1/maven-gpg-plugin-3.0.1.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/maven-plugin-api/3.0/maven-plugin-api-3.0.jar"/>
        <pathelement location="../../.m2/repository/org/sonatype/sisu/sisu-inject-plexus/1.4.2/sisu-inject-plexus-1.4.2.jar"/>
        <pathelement location="../../.m2/repository/org/sonatype/sisu/sisu-inject-bean/1.4.2/sisu-inject-bean-1.4.2.jar"/>
        <pathelement location="../../.m2/repository/org/sonatype/sisu/sisu-guice/2.1.7/sisu-guice-2.1.7-noaop.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/maven-core/3.0/maven-core-3.0.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/maven-settings-builder/3.0/maven-settings-builder-3.0.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/maven-repository-metadata/3.0/maven-repository-metadata-3.0.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/maven-aether-provider/3.0/maven-aether-provider-3.0.jar"/>
        <pathelement location="../../.m2/repository/org/sonatype/aether/aether-impl/1.7/aether-impl-1.7.jar"/>
        <pathelement location="../../.m2/repository/org/sonatype/aether/aether-spi/1.7/aether-spi-1.7.jar"/>
        <pathelement location="../../.m2/repository/org/sonatype/aether/aether-api/1.7/aether-api-1.7.jar"/>
        <pathelement location="../../.m2/repository/org/sonatype/aether/aether-util/1.7/aether-util-1.7.jar"/>
        <pathelement location="../../.m2/repository/org/codehaus/plexus/plexus-interpolation/1.14/plexus-interpolation-1.14.jar"/>
        <pathelement location="../../.m2/repository/org/codehaus/plexus/plexus-classworlds/2.2.3/plexus-classworlds-2.2.3.jar"/>
        <pathelement location="../../.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/maven-artifact/3.0/maven-artifact-3.0.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/maven-model/3.0/maven-model-3.0.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/maven-model-builder/3.0/maven-model-builder-3.0.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/maven-settings/3.0/maven-settings-3.0.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/shared/maven-artifact-transfer/0.12.0/maven-artifact-transfer-0.12.0.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/shared/maven-common-artifact-filters/3.0.1/maven-common-artifact-filters-3.0.1.jar"/>
        <pathelement location="../../.m2/repository/org/apache/maven/shared/maven-shared-utils/3.1.0/maven-shared-utils-3.1.0.jar"/>
        <pathelement location="../../.m2/repository/commons-io/commons-io/2.5/commons-io-2.5.jar"/>
        <pathelement location="../../.m2/repository/commons-codec/commons-codec/1.11/commons-codec-1.11.jar"/>
        <pathelement location="../../.m2/repository/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar"/>
        <pathelement location="../../.m2/repository/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.jar"/>
        <pathelement location="../../.m2/repository/org/sonatype/plexus/plexus-sec-dispatcher/1.4/plexus-sec-dispatcher-1.4.jar"/>
        <pathelement location="../../.m2/repository/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar"/>
    </path>
    <path id="CAT_Lib.classpath">
        <pathelement location="target/classes"/>
        <pathelement location="target/test-classes"/>
        <pathelement location="test-libs/assertj-core-3.10.0.jar"/>
        <pathelement location="lib/json-20210307.jar"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.AutomataTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.AutomataTest.testString.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CALabelTest.constructorTest_Exception_notWellFormedIdleLabel2.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CALabelTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CALabelTest.matchException.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CAStateTest.constructorTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CAStateTest.constructorTest3_Exception_nullArgument.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CAStateTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CAStateTest.toStringFinalTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CAStateTest.toStringInitialTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CAStateTest.toStringTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CAT_Lib.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ChoreographyTest.branchingCondition.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ChoreographyTest.chorTestLMCS2020TransitionsConstructorTwoArguments.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ChoreographyTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CMLabelTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CMLabelTest.testConstructor.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CMLabelTest.testConstructorException.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.finalStates.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.initialState.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.lmcs2020Test.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.lmcs2020Test2.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.rank(List).classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.rank.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.scico2020Test.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.scicoTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.states.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.testCompositionSpec(List).classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.CompositionTest.transitions.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.contractAutomataTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.contractAutomataTest.operatorsTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.conversionXMLNew.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.conversionXMLNewtestSCP2020_BusinessClientxHotel.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.conversionXMLtestSCP2020_BusinessClientxHotel.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.dumbForCoverage.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.importMXENewPrincipalNoBasicStates.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.loadConvertSCP2020_BusinessClientxHotel.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.loadIllActions_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.loadIllFinalStates_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.p.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parseAndCheckBasicStatesTest_SCP2020_BusinessClientxHotelxEconomyClient.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parseAndConvertAllMxe.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parseCoordination2021.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parseEmptyElements_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parseIllActions_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parseMxeDuplicateBasicStates.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parseNoFinalStates_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parsePrintLoadTest_SCP2020_BusinessClientxHotelxEconomyClient.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parseWrongFinalStates_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.parse_noxy.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ConverterTest.wrongFormatData_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.DataConverterTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.DimacConverterTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.DimacConverterTest.stressPrimeImplicant.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.DimacConverterTest.testExport.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.DimacConverterTest.testImport.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.DimacConverterTest.testImport2.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.DimacConverterTest.testPrimeImplicant.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.DimacConverterTest.testPrimeImplicant2.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.DimacConverterTest.testUnsat.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.family.converters.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.family.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.familyTest (1).classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.familyTest.converterTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.familyOrc.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.familyWithoutPO.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.getSubProductsofProduct.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.getSuperProductsofProduct.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.familyTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.maximalProducts.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testCanonicalProducts.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testFamilyOrc.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testImportFamily.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testMaximumDepth.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testOrchestrationOfFamilyEnumerative.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testPO.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testReadProducts.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testSubsetOfProductsFromIndex.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testToString.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testValidProductsOrc.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.testWriteException.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.validProducts.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FamilyTest.validProductsOrcFam.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FeatureIDEconverterTest.testExportException.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FeatureIDEconverterTest.testImportFamilyException.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FeatureIDEconverterTest.testImportFamilyWithSubfolder.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FeatureIDEconverterTest.testImportFamilyWithSubfolderAndException.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FeatureTest.constructorTestAction.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FeatureTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FeatureTest.testEquals3.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.familyWithoutPO.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.getSuperProductsofProduct.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.importFamily.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.maximalProducts.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.orcTestSCP2020_BusinessClientxHotelxEconomyClient_empty.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.orcTestSCP2020_BusinessClientxHotelxEconomyClient_product4858_transitions.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.testCanonicalProducts.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.testFamilyOrc.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.testForte2021.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.testOrchestrationOfFamilyEnumerative.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.testSelectProductSatisfyingPredicateException.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.testToString.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCATest.validProductsOrcFam.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.FMCAUtilTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.JsonConverterTest.importTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.JsonConverterTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.JsonConverterTest.loadConvert.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.JsonConverterTest.test.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.JsonConverterTest.testTr.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ModelCheckingTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ModelCheckingTest.testConstructor.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ModelCheckingTest.testCorSynthesis2021.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ModelCheckingTest.testOrcSynthesis2021.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MpcSynthesisTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MpcSynthesisTest.mpcTest2.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MpcSynthesisTest.mpcTest_nonempty.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.ambiguousStates_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.choreoConcur2021.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.choreoConcur2021projectAndComposeTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.choreoConcur2021_2.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.chorTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.chorTestControllableLazyOfferTransitions.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.chorTestLMCS2020Transitions.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.chorTestLMCS2020TransitionsToString.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.chorTest_urgent_empty.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.cloneTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.compositionTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.compositionTestSCP2020_BusinessClientxHotelxEconomyClient.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.compositionTestSCP2020_BusinessClientxHotel_closed.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.compositionTestSCP2020_BusinessClientxHotel_open.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.compositionTestSCP2020_nonassociative.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.compTestBound.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.compTestBound_noTransitions.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.compTestEmptySimple.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.compTestSimple.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.conflictingFinalStates_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.constructorTest_Exception_emptyTransitions.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.conversionXMLtestSCP2020_BusinessClientxHotel.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.getRankZero.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.loadAndCheckBasicStatesTest_SCP2020_BusinessClientxHotelxEconomyClient.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.loadTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.loadVSparseSCP2020_BusinessClient.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.mpcEmptyTestLMCS2020.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.mpcEmptyTestLMCS20202.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.mpcEmptyTestNoDangling.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.mpcTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.mpcTest2.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.noFinalStatesArray_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.noFinalStatesInTransitions_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.noFinalStates_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.noInitialState_exception.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.orcEmptyTestNoDangling.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.orcTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.orcTestLMCS2020Transitions.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.orcTestLMCS2020TransitionsToString.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.orcTestLMCS2020Transitions_new.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.orcTestSCP2020_BusinessClientxHotelxEconomyClient_transitions.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.orcTest_empty_lazy.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.orcTest_nonempty.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.parseAndCheckBasicStatesTest_SCP2020_BusinessClientxHotelxEconomyClient.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.print_SCP2020_BusinessClient.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.projectionTestSCP2020_BusinessClient.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.setFinalStatesOfPrinc_Exception_nullArgument.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.setTransition_Exception_nullArgument.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.unionTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.union_l.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.union_null.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATest.union_statelabelsnotnumbers.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATransitionTest.branchingCondition.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATransitionTest.constructorException.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATransitionTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATransitionTest.testEquals.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATransitionTest.testEquals6.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.MSCATransitionTest.toStringException.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.OrchestrationTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ProductTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ProductTest.testEquals4.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ProductTest.testToString.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ProjectionTest.choreoConcur2021projectAndComposeTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ProjectionTest.choreoConcur2021projectAndComposeTestCM.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ProjectionTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ProjectionTest.projectOnMachineAndImport.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.Snippets.HoeffdingInequality.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.Snippets.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.Snippets.test1.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.Snippets.test4.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.src.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.test.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.UnionTest.classpath">
        <path refid="CAT_Lib.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <target name="init">
        <mkdir dir="target/classes"/>
        <mkdir dir="target/test-classes"/>
        <copy includeemptydirs="false" todir="target/classes">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="target/test-classes">
            <fileset dir="test">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="target/classes"/>
        <delete dir="target/test-classes"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="target/classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="CAT_Lib.classpath"/>
        </javac>
        <javac debug="true" debuglevel="${debuglevel}" destdir="target/test-classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="test"/>
            <classpath refid="CAT_Lib.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="AutomataTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.AutomataTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.AutomataTest.classpath"/>
        </junit>
    </target>
    <target name="AutomataTest.testString">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.AutomataTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.AutomataTest.testString.classpath"/>
        </junit>
    </target>
    <target name="CALabelTest.constructorTest_Exception_notWellFormedIdleLabel2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CALabelTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CALabelTest.constructorTest_Exception_notWellFormedIdleLabel2.classpath"/>
        </junit>
    </target>
    <target name="CALabelTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CALabelTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CALabelTest.classpath"/>
        </junit>
    </target>
    <target name="CALabelTest.matchException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CALabelTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CALabelTest.matchException.classpath"/>
        </junit>
    </target>
    <target name="CAStateTest.constructorTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CAStateTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CAStateTest.constructorTest.classpath"/>
        </junit>
    </target>
    <target name="CAStateTest.constructorTest3_Exception_nullArgument">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CAStateTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CAStateTest.constructorTest3_Exception_nullArgument.classpath"/>
        </junit>
    </target>
    <target name="CAStateTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CAStateTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CAStateTest.classpath"/>
        </junit>
    </target>
    <target name="CAStateTest.toStringFinalTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CAStateTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CAStateTest.toStringFinalTest.classpath"/>
        </junit>
    </target>
    <target name="CAStateTest.toStringInitialTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CAStateTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CAStateTest.toStringInitialTest.classpath"/>
        </junit>
    </target>
    <target name="CAStateTest.toStringTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CAStateTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CAStateTest.toStringTest.classpath"/>
        </junit>
    </target>
    <target name="CAT_Lib">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="examplesTest.Snippets" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.AutomataTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.CALabelTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.CAStateTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.CMLabelTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.LabelTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATransitionTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.DataConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.JsonConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.MxeConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FeatureTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.ProductTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.FeatureIDEconverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.ProdFamilyConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ChoreographyTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ModelCheckingTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.MpcSynthesisTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.OrchestrationTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ProductOrchestrationTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ProjectionTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.UnionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CAT_Lib.classpath"/>
        </junit>
    </target>
    <target name="ChoreographyTest.branchingCondition">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ChoreographyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ChoreographyTest.branchingCondition.classpath"/>
        </junit>
    </target>
    <target name="ChoreographyTest.chorTestLMCS2020TransitionsConstructorTwoArguments">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ChoreographyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ChoreographyTest.chorTestLMCS2020TransitionsConstructorTwoArguments.classpath"/>
        </junit>
    </target>
    <target name="ChoreographyTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ChoreographyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ChoreographyTest.classpath"/>
        </junit>
    </target>
    <target name="CMLabelTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CMLabelTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CMLabelTest.classpath"/>
        </junit>
    </target>
    <target name="CMLabelTest.testConstructor">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CMLabelTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CMLabelTest.testConstructor.classpath"/>
        </junit>
    </target>
    <target name="CMLabelTest.testConstructorException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.CMLabelTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CMLabelTest.testConstructorException.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.finalStates">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.finalStates.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.initialState">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.initialState.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.lmcs2020Test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.lmcs2020Test.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.lmcs2020Test2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.lmcs2020Test2.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.rank(List)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.rank(List).classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.rank">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.rank.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.scico2020Test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.scico2020Test.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.scicoTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.scicoTest.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.states">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.states.classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.testCompositionSpec(List)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.testCompositionSpec(List).classpath"/>
        </junit>
    </target>
    <target name="CompositionTest.transitions">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.CompositionTest.transitions.classpath"/>
        </junit>
    </target>
    <target name="contractAutomataTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.contractAutomataTest.classpath"/>
        </junit>
    </target>
    <target name="contractAutomataTest.operatorsTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.contractAutomataTest.operatorsTest.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.conversionXMLNew">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.conversionXMLNew.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.conversionXMLNewtestSCP2020_BusinessClientxHotel">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.conversionXMLNewtestSCP2020_BusinessClientxHotel.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.conversionXMLtestSCP2020_BusinessClientxHotel">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.conversionXMLtestSCP2020_BusinessClientxHotel.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.dumbForCoverage">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.dumbForCoverage.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.importMXENewPrincipalNoBasicStates">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.importMXENewPrincipalNoBasicStates.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.loadConvertSCP2020_BusinessClientxHotel">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.loadConvertSCP2020_BusinessClientxHotel.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.loadIllActions_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.loadIllActions_exception.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.loadIllFinalStates_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.loadIllFinalStates_exception.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.p">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.p.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parseAndCheckBasicStatesTest_SCP2020_BusinessClientxHotelxEconomyClient">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parseAndCheckBasicStatesTest_SCP2020_BusinessClientxHotelxEconomyClient.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parseAndConvertAllMxe">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parseAndConvertAllMxe.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parseCoordination2021">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parseCoordination2021.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parseEmptyElements_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parseEmptyElements_exception.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parseIllActions_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parseIllActions_exception.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parseMxeDuplicateBasicStates">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parseMxeDuplicateBasicStates.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parseNoFinalStates_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parseNoFinalStates_exception.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parsePrintLoadTest_SCP2020_BusinessClientxHotelxEconomyClient">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parsePrintLoadTest_SCP2020_BusinessClientxHotelxEconomyClient.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parseWrongFinalStates_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parseWrongFinalStates_exception.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.parse_noxy">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.parse_noxy.classpath"/>
        </junit>
    </target>
    <target name="ConverterTest.wrongFormatData_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ConverterTest.wrongFormatData_exception.classpath"/>
        </junit>
    </target>
    <target name="DataConverterTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.DataConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.DataConverterTest.classpath"/>
        </junit>
    </target>
    <target name="DimacConverterTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.DimacConverterTest.classpath"/>
        </junit>
    </target>
    <target name="DimacConverterTest.stressPrimeImplicant">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea -Xmx5000m"/>
            <classpath refid="run.DimacConverterTest.stressPrimeImplicant.classpath"/>
        </junit>
    </target>
    <target name="DimacConverterTest.testExport">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.DimacConverterTest.testExport.classpath"/>
        </junit>
    </target>
    <target name="DimacConverterTest.testImport">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.DimacConverterTest.testImport.classpath"/>
        </junit>
    </target>
    <target name="DimacConverterTest.testImport2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.DimacConverterTest.testImport2.classpath"/>
        </junit>
    </target>
    <target name="DimacConverterTest.testPrimeImplicant">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.DimacConverterTest.testPrimeImplicant.classpath"/>
        </junit>
    </target>
    <target name="DimacConverterTest.testPrimeImplicant2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.DimacConverterTest.testPrimeImplicant2.classpath"/>
        </junit>
    </target>
    <target name="DimacConverterTest.testUnsat">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.DimacConverterTest.testUnsat.classpath"/>
        </junit>
    </target>
    <target name="family.converters">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.family.converters.classpath"/>
        </junit>
    </target>
    <target name="family">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.family.classpath"/>
        </junit>
    </target>
    <target name="familyTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.familyTest (1).classpath"/>
        </junit>
    </target>
    <target name="familyTest.converterTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.familyTest.converterTest.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.familyOrc">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.familyOrc.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.familyWithoutPO">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.familyWithoutPO.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.getSubProductsofProduct">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.getSubProductsofProduct.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.getSuperProductsofProduct">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.getSuperProductsofProduct.classpath"/>
        </junit>
    </target>
    <target name="familyTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.familyTest.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.maximalProducts">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.maximalProducts.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testCanonicalProducts">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testCanonicalProducts.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testFamilyOrc">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testFamilyOrc.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testImportFamily">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testImportFamily.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testMaximumDepth">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testMaximumDepth.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testOrchestrationOfFamilyEnumerative">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testOrchestrationOfFamilyEnumerative.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testPO">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testPO.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testReadProducts">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testReadProducts.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testSubsetOfProductsFromIndex">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testSubsetOfProductsFromIndex.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testToString">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testToString.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testValidProductsOrc">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testValidProductsOrc.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.testWriteException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.testWriteException.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.validProducts">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.validProducts.classpath"/>
        </junit>
    </target>
    <target name="FamilyTest.validProductsOrcFam">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FamilyTest.validProductsOrcFam.classpath"/>
        </junit>
    </target>
    <target name="FeatureIDEconverterTest.testExportException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.FeatureIDEconverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FeatureIDEconverterTest.testExportException.classpath"/>
        </junit>
    </target>
    <target name="FeatureIDEconverterTest.testImportFamilyException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.FeatureIDEconverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FeatureIDEconverterTest.testImportFamilyException.classpath"/>
        </junit>
    </target>
    <target name="FeatureIDEconverterTest.testImportFamilyWithSubfolder">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.FeatureIDEconverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FeatureIDEconverterTest.testImportFamilyWithSubfolder.classpath"/>
        </junit>
    </target>
    <target name="FeatureIDEconverterTest.testImportFamilyWithSubfolderAndException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.FeatureIDEconverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FeatureIDEconverterTest.testImportFamilyWithSubfolderAndException.classpath"/>
        </junit>
    </target>
    <target name="FeatureTest.constructorTestAction">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FeatureTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FeatureTest.constructorTestAction.classpath"/>
        </junit>
    </target>
    <target name="FeatureTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FeatureTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FeatureTest.classpath"/>
        </junit>
    </target>
    <target name="FeatureTest.testEquals3">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FeatureTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FeatureTest.testEquals3.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.familyWithoutPO">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.familyWithoutPO.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.getSuperProductsofProduct">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.getSuperProductsofProduct.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.importFamily">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.importFamily.classpath"/>
        </junit>
    </target>
    <target name="FMCATest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.maximalProducts">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.maximalProducts.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.orcTestSCP2020_BusinessClientxHotelxEconomyClient_empty">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.orcTestSCP2020_BusinessClientxHotelxEconomyClient_empty.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.orcTestSCP2020_BusinessClientxHotelxEconomyClient_product4858_transitions">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.orcTestSCP2020_BusinessClientxHotelxEconomyClient_product4858_transitions.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.testCanonicalProducts">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.testCanonicalProducts.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.testFamilyOrc">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.testFamilyOrc.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.testForte2021">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.testForte2021.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.testOrchestrationOfFamilyEnumerative">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.testOrchestrationOfFamilyEnumerative.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.testSelectProductSatisfyingPredicateException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.testSelectProductSatisfyingPredicateException.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.testToString">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.testToString.classpath"/>
        </junit>
    </target>
    <target name="FMCATest.validProductsOrcFam">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCATest.validProductsOrcFam.classpath"/>
        </junit>
    </target>
    <target name="FMCAUtilTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomata.family.FMCAUtilTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.FMCAUtilTest.classpath"/>
        </junit>
    </target>
    <target name="JsonConverterTest.importTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.JsonConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.JsonConverterTest.importTest.classpath"/>
        </junit>
    </target>
    <target name="JsonConverterTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.JsonConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.JsonConverterTest.classpath"/>
        </junit>
    </target>
    <target name="JsonConverterTest.loadConvert">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.JsonConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.JsonConverterTest.loadConvert.classpath"/>
        </junit>
    </target>
    <target name="JsonConverterTest.test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.JsonConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.JsonConverterTest.test.classpath"/>
        </junit>
    </target>
    <target name="JsonConverterTest.testTr">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.JsonConverterTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.JsonConverterTest.testTr.classpath"/>
        </junit>
    </target>
    <target name="ModelCheckingTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ModelCheckingTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ModelCheckingTest.classpath"/>
        </junit>
    </target>
    <target name="ModelCheckingTest.testConstructor">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ModelCheckingTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ModelCheckingTest.testConstructor.classpath"/>
        </junit>
    </target>
    <target name="ModelCheckingTest.testCorSynthesis2021">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ModelCheckingTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ModelCheckingTest.testCorSynthesis2021.classpath"/>
        </junit>
    </target>
    <target name="ModelCheckingTest.testOrcSynthesis2021">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ModelCheckingTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ModelCheckingTest.testOrcSynthesis2021.classpath"/>
        </junit>
    </target>
    <target name="MpcSynthesisTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.MpcSynthesisTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MpcSynthesisTest.classpath"/>
        </junit>
    </target>
    <target name="MpcSynthesisTest.mpcTest2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.MpcSynthesisTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MpcSynthesisTest.mpcTest2.classpath"/>
        </junit>
    </target>
    <target name="MpcSynthesisTest.mpcTest_nonempty">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.MpcSynthesisTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MpcSynthesisTest.mpcTest_nonempty.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.ambiguousStates_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.ambiguousStates_exception.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.choreoConcur2021">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.choreoConcur2021.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.choreoConcur2021projectAndComposeTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.choreoConcur2021projectAndComposeTest.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.choreoConcur2021_2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.choreoConcur2021_2.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.chorTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.chorTest.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.chorTestControllableLazyOfferTransitions">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.chorTestControllableLazyOfferTransitions.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.chorTestLMCS2020Transitions">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.chorTestLMCS2020Transitions.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.chorTestLMCS2020TransitionsToString">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.chorTestLMCS2020TransitionsToString.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.chorTest_urgent_empty">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.chorTest_urgent_empty.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.cloneTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.cloneTest.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.compositionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomata.automaton.label.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.compositionTest.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.compositionTestSCP2020_BusinessClientxHotelxEconomyClient">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.compositionTestSCP2020_BusinessClientxHotelxEconomyClient.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.compositionTestSCP2020_BusinessClientxHotel_closed">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.compositionTestSCP2020_BusinessClientxHotel_closed.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.compositionTestSCP2020_BusinessClientxHotel_open">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.compositionTestSCP2020_BusinessClientxHotel_open.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.compositionTestSCP2020_nonassociative">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.compositionTestSCP2020_nonassociative.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.compTestBound">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.compTestBound.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.compTestBound_noTransitions">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.compTestBound_noTransitions.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.compTestEmptySimple">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.compTestEmptySimple.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.compTestSimple">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.compTestSimple.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.conflictingFinalStates_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.conflictingFinalStates_exception.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.constructorTest_Exception_emptyTransitions">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.constructorTest_Exception_emptyTransitions.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.conversionXMLtestSCP2020_BusinessClientxHotel">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.conversionXMLtestSCP2020_BusinessClientxHotel.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.getRankZero">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.getRankZero.classpath"/>
        </junit>
    </target>
    <target name="MSCATest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.loadAndCheckBasicStatesTest_SCP2020_BusinessClientxHotelxEconomyClient">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.loadAndCheckBasicStatesTest_SCP2020_BusinessClientxHotelxEconomyClient.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.loadTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.loadTest.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.loadVSparseSCP2020_BusinessClient">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.loadVSparseSCP2020_BusinessClient.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.mpcEmptyTestLMCS2020">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.mpcEmptyTestLMCS2020.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.mpcEmptyTestLMCS20202">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.mpcEmptyTestLMCS20202.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.mpcEmptyTestNoDangling">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.mpcEmptyTestNoDangling.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.mpcTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.mpcTest.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.mpcTest2">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.mpcTest2.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.noFinalStatesArray_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.noFinalStatesArray_exception.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.noFinalStatesInTransitions_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.noFinalStatesInTransitions_exception.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.noFinalStates_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.noFinalStates_exception.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.noInitialState_exception">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.noInitialState_exception.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.orcEmptyTestNoDangling">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.orcEmptyTestNoDangling.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.orcTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.orcTest.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.orcTestLMCS2020Transitions">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.orcTestLMCS2020Transitions.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.orcTestLMCS2020TransitionsToString">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.orcTestLMCS2020TransitionsToString.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.orcTestLMCS2020Transitions_new">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.orcTestLMCS2020Transitions_new.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.orcTestSCP2020_BusinessClientxHotelxEconomyClient_transitions">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.orcTestSCP2020_BusinessClientxHotelxEconomyClient_transitions.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.orcTest_empty_lazy">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.orcTest_empty_lazy.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.orcTest_nonempty">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.orcTest_nonempty.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.parseAndCheckBasicStatesTest_SCP2020_BusinessClientxHotelxEconomyClient">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.parseAndCheckBasicStatesTest_SCP2020_BusinessClientxHotelxEconomyClient.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.print_SCP2020_BusinessClient">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.print_SCP2020_BusinessClient.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.projectionTestSCP2020_BusinessClient">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.projectionTestSCP2020_BusinessClient.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.setFinalStatesOfPrinc_Exception_nullArgument">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.setFinalStatesOfPrinc_Exception_nullArgument.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.setTransition_Exception_nullArgument">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.setTransition_Exception_nullArgument.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.unionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.unionTest.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.union_l">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.union_l.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.union_null">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.union_null.classpath"/>
        </junit>
    </target>
    <target name="MSCATest.union_statelabelsnotnumbers">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATest.union_statelabelsnotnumbers.classpath"/>
        </junit>
    </target>
    <target name="MSCATransitionTest.branchingCondition">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATransitionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATransitionTest.branchingCondition.classpath"/>
        </junit>
    </target>
    <target name="MSCATransitionTest.constructorException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATransitionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATransitionTest.constructorException.classpath"/>
        </junit>
    </target>
    <target name="MSCATransitionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATransitionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATransitionTest.classpath"/>
        </junit>
    </target>
    <target name="MSCATransitionTest.testEquals">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATransitionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATransitionTest.testEquals.classpath"/>
        </junit>
    </target>
    <target name="MSCATransitionTest.testEquals6">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATransitionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATransitionTest.testEquals6.classpath"/>
        </junit>
    </target>
    <target name="MSCATransitionTest.toStringException">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATransitionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.MSCATransitionTest.toStringException.classpath"/>
        </junit>
    </target>
    <target name="OrchestrationTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.OrchestrationTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.OrchestrationTest.classpath"/>
        </junit>
    </target>
    <target name="ProductTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.ProductTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ProductTest.classpath"/>
        </junit>
    </target>
    <target name="ProductTest.testEquals4">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.ProductTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ProductTest.testEquals4.classpath"/>
        </junit>
    </target>
    <target name="ProductTest.testToString">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.ProductTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ProductTest.testToString.classpath"/>
        </junit>
    </target>
    <target name="ProjectionTest.choreoConcur2021projectAndComposeTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ProjectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ProjectionTest.choreoConcur2021projectAndComposeTest.classpath"/>
        </junit>
    </target>
    <target name="ProjectionTest.choreoConcur2021projectAndComposeTestCM">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ProjectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ProjectionTest.choreoConcur2021projectAndComposeTestCM.classpath"/>
        </junit>
    </target>
    <target name="ProjectionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ProjectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ProjectionTest.classpath"/>
        </junit>
    </target>
    <target name="ProjectionTest.projectOnMachineAndImport">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ProjectionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ProjectionTest.projectOnMachineAndImport.classpath"/>
        </junit>
    </target>
    <target name="Snippets.HoeffdingInequality">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="examplesTest.Snippets" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.Snippets.HoeffdingInequality.classpath"/>
        </junit>
    </target>
    <target name="Snippets">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="examplesTest.Snippets" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.Snippets.classpath"/>
        </junit>
    </target>
    <target name="Snippets.test1">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="examplesTest.Snippets" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.Snippets.test1.classpath"/>
        </junit>
    </target>
    <target name="Snippets.test4">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="examplesTest.Snippets" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.Snippets.test4.classpath"/>
        </junit>
    </target>
    <target name="src">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.src.classpath"/>
        </junit>
    </target>
    <target name="test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="examplesTest.Snippets" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.AutomataTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.CALabelTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.CAStateTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.CMLabelTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.LabelTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.MSCATransitionTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.ConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.DataConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.JsonConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.convertersTest.MxeConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FMCATest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FamilyTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.FeatureTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.ProductTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.DimacConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.FeatureIDEconverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.familytest.converterTest.ProdFamilyConverterTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ChoreographyTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.CompositionTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ModelCheckingTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.MpcSynthesisTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.OrchestrationTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ProductOrchestrationTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.ProjectionTest" todir="${junit.output.dir}"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.UnionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.test.classpath"/>
        </junit>
    </target>
    <target name="UnionTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="io.github.davidebasile.contractautomatatest.operatorsTest.UnionTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.UnionTest.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
